{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Mathislewald Backend","text":"<p>This documentation covers the full Mathiswald application hosted at http://geowwd.uni-freiburg.de.</p> <p>The current state of the application involves several parts:</p> <ul> <li>The website at http://geowwd.uni-freiburg.de</li> <li>A GeoServer for hosting geodata from the area</li> <li>A streamlit application to ease data upload</li> </ul>"},{"location":"#contents","title":"Contents","text":"<ul> <li>Install guide</li> <li>Configure</li> </ul>"},{"location":"configure/","title":"Configure the backend","text":"<p>This guide runs through the backend configuration. Make sure that you  install and run the backend docker containers first.  This guide assumes that both, the GeoServer and streamlit upload application are running.</p>"},{"location":"configure/#install-a-web-server","title":"Install a web-server","text":"<p>For this guide, nginx is used. The nginx is necessary as a proxy server, to manage access to the streamlit  application, which can directly upload external, potentially untrusted files. Further, it's needed to enabled SSL-encryption for the full backend stack.</p> <p>Refer to the nginx install instructions for detailed information. On Debian, run the following command.</p> <pre><code>sudo apt-get install nginx\n</code></pre> <p>Make sure, that nginx is up and running:</p> <pre><code>service nginx status\n</code></pre> <p>This should show something similar to:</p> <pre><code>\u25cf nginx.service - A high performance web server and a reverse proxy server\n     Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: enabled)\n     Active: active (running) since Fri 2023-02-10 11:30:08 UTC; 5 days ago\n       Docs: man:nginx(8)\n   Main PID: 929 (nginx)\n      Tasks: 3 (limit: 4575)\n     Memory: 20.3M\n        CPU: 1.791s\n     CGroup: /system.slice/nginx.service\n             \u251c\u2500929 \"nginx: master process /usr/sbin/nginx -g daemon on; master_process on;\"\n             \u251c\u2500930 \"nginx: worker process\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\"\n             \u2514\u2500931 \"nginx: worker process\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\"\n\nFeb 10 11:30:08 geowwd systemd[1]: Starting A high performance web server and a reverse proxy server...\nFeb 10 11:30:08 geowwd systemd[1]: Started A high performance web server and a reverse proxy server.\n</code></pre>"},{"location":"configure/#configure-nginx","title":"Configure nginx","text":""},{"location":"configure/#nginx-user","title":"nginx user","text":"<p>Make sure, that nginx is allowed to read the files uploaded by the streamlit application. For this, you can either add the <code>www-data</code> user to the group of the user running the application, let www-data run the application, or change the user running nginx.</p> <p>Let's assume that a user <code>geouser</code> is running the streamlit application. Then change <code>/etc/nginx/nginx.conf</code> first line from</p> <pre><code>user www-data;\n</code></pre> <p>to </p> <pre><code># user www-data;\nuser geouser;\n</code></pre>"},{"location":"configure/#password-protection","title":"Password protection","text":"<p>The most important step is to secure the streamlit application in production:</p> <p>Follow the instruction on how to create a <code>.htpasswd</code> file for nginx.</p> <p>Create that file to the location: <code>/etc/nginx/.htpasswd</code>, or change the config below, if you choose another location:</p> <pre><code>sudo htpasswd -c /etc/nginx/.htpasswd uploader\n</code></pre> <p>Then, you will be prompted for the password.</p>"},{"location":"configure/#configure-sites","title":"Configure sites","text":"<p>Next, add a new configuration to the available sites of the webserver:</p> <p>Create a <code>/etc/nginx/stes-available/mathis.conf</code>:</p> <pre><code>server {\n    listen 80 default_server;\n    listen [::]:80 default_server;\n\n    root /home/geouser/www/html;\n    index index.html index.htm index.nginx-debian.html;\n\n    # you need to change this\n    server_name geowwd.uni-freiburg.de;\n\n    location / {\n        add_header 'Access-Control-Allow-Origin' '*' always;\n        add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;\n        # First attempt to serve request as file, then\n        # as directory, then fall back to displaying a 404.\n        try_files $uri $uri/ /index.html;\n    }\n\n    location /img {\n        add_header 'Access-Control-Allow-Origin' '*' always;\n        add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;\n        root /home/geouser/www;\n    }\n\n    location /geoserver {\n                proxy_pass http://127.0.0.1:8080/geoserver;\n        proxy_set_header Host $host;\n                proxy_set_header X-Real-IP $remote_addr;\n                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n                proxy_set_header X-Forwarded-Proto $scheme;\n        }\n\n    # this seems to be necessary for login behind proxy\n    location ^~ /j_spring_security_check {\n        proxy_pass http://localhost:8080/geoserver;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n\n    location /upload {\n        auth_basic      \"Upload Area\";\n        auth_basic_user_file    /etc/nginx/.htpasswd;\n        client_max_body_size 2000M;\n                proxy_pass http://127.0.0.1:8501/upload;\n        }\n\n        location /upload/static {\n                proxy_pass http://127.0.0.1:8501/upload/static/;\n        }\n\n        location /upload/healthz {\n                proxy_pass http://127.0.0.1:8501/upload/healthz;\n        }\n\n        location /upload/vendor {\n                proxy_pass http://127.0.0.1:8501/upload/vendor;\n        }\n\n        location /upload/stream {\n                proxy_pass http://127.0.0.1:8501/upload/stream;\n                proxy_http_version 1.1;\n                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n                proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $host;\n                proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header Upgrade $http_upgrade;\n                proxy_set_header Connection \"upgrade\";\n                proxy_read_timeout 86400;\n        proxy_buffering off;\n    }\n}\n</code></pre> <p>Finally, link this config to the <code>/etc/nginx/sites-enabled</code> folder:</p> <pre><code>sudo ln -s /etc/nginx/sites-available/mathis.conf /etc/nginx/sites-enabled/mathis.conf\n</code></pre>"},{"location":"configure/#reload","title":"Reload","text":"<p>Last, reload the nginx server and verify that it is still running.</p> <pre><code>sudo service nginx reload\nservice nginx status\n</code></pre>"},{"location":"install/","title":"Install Mathislewald backend","text":"<p>The Mathislewald backend is fully containerized. You can easily deploy it on  other hardware. For that purpose, this repository contains a Docker compose recipe that will spin up the entire hardware for you.</p>"},{"location":"install/#install-docker","title":"Install Docker","text":"<p>First you need Docker. Install instructions can be found in the  Docker documentation. </p> <p>For Debian, you need to all requirements and add Docker to the package sources, as described in the docs. Then run</p> <pre><code>sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n</code></pre>"},{"location":"install/#start-the-backend","title":"Start the backend","text":"<p>Download the repository to a suitable location. Note, that the volumes  for the several container will be mounted on paths relative to the repository.</p> <pre><code>git clone https://github.com/hydrocode-de/mathislewald-backend\ncd mathislewald-backend\n</code></pre> <p>The streamlit application will run with non-root user. Hence, you need to provide details to the user. You can find the information by running:</p> <pre><code>id &lt;USER&gt; -u  # get UID\nid &lt;USER&gt; -g  # get GID\n</code></pre> <p>Then set these as <code>GID</code> and <code>UID</code> environment variables. </p> <p>The better approach is to add a <code>.env</code> file to the repo. Additionally, you can set the <code>RESTART=no</code> to prevent a local deployment from restarting on each host system boot. Alternatively, set <code>RESTART=always</code> in production, to let the docker daemon restart the containers on system re-boot and failures: </p> <pre><code>echo \"UID=$(id -u)\\nGID=$(id -g)\\nRESTART=no\" &gt; .env\n</code></pre> <p>Finally you can run the whole infrastructure:</p> <pre><code>docker compose up -d\n</code></pre> <p>To make sure everything is running, you can check the running container:</p> <pre><code>docker compose ps\n</code></pre> <p>which should give something like this:</p> <pre><code>NAME                               IMAGE                                             COMMAND                  SERVICE             CREATED             STATUS              PORTS\nmathislewald-backend-geoserver-1   docker.osgeo.org/geoserver:2.22.0                 \"/bin/sh -c /opt/sta\u2026\"   geoserver           26 minutes ago      Up 26 minutes       0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp\nmathislewald-backend-upload-1      ghcr.io/hydrocode-de/mathislewald-upload:v0.7.0   \"streamlit run app/u\u2026\"   upload              19 minutes ago      Up 19 minutes       127.0.0.1:8501-&gt;8501/tcp\n</code></pre>"}]}